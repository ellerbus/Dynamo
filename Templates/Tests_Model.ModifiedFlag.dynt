{% include 'NamingConventions' -%}
{% capture PROJECT %}{{ SOLUTION }}.Tests{% endcapture -%}
{% capture FILENAME %}{{ PROJECT }}\Core\Models\{{ BASECLASS }}ModelTests.cs{% endcapture -%}
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using {{ SOLUTION }}.Core.Models;

namespace {{ PROJECT }}.Core.Models
{
	[TestClass]
	public class {{ BASECLASS }}ModelTests
	{
		#region Constructor Tests

		[TestMethod]
		public void {{ BASECLASS }}_EmptyConstructor_Should_FlagModified()
		{
			var actual = new {{ BASECLASS }}()
			{
				{% for column in table.columns %}{{ column.property_name }} = {% case column.clr_type %}{% when 'int' or 'double' %}9{% when 'string' %}"aa"{% when 'DateTime' %}DateTime.Now{% when 'bool' %}true{% else %}default({{ column.clr_type }}){% endcase %}{%if forloop.last == false %},
				{% endif %}{% endfor %}
			};

			Assert.IsTrue(actual.IsModified);
		}

		[TestMethod]
		public void {{ BASECLASS }}_FullConstructor_Should_FlagNotModified()
		{
			var actual = new {{ BASECLASS }}({% for column in table.columns %}{% case column.clr_type %}{% when 'int' or 'double' %}9{% when 'string' %}"aa"{% when 'DateTime' %}DateTime.Now{% when 'bool' %}true{% else %}default({{ column.clr_type }}){% endcase %}{%if forloop.last == false %}, {% endif %}{% endfor %});

			Assert.IsFalse(actual.IsModified);
		}
		
		#endregion

		#region Property Tests
		{% for column in table.columns %}
		//[TestMethod]
		//public void {{ BASECLASS }}_{{ column.property_name }}_Should_DoSomething()
		//{ {% capture VALUE %}{% case column.clr_type %}{% when 'int' or 'double' %}9{% when 'string' %}"aa"{% when 'DateTime' %}DateTime.Now{% when 'bool' %}true{% else %}default({{ column.clr_type }}){% endcase %}{% endcapture %}
		//
		//	var expected = {{ VALUE  }};
		//
		//	var actual = new {{ BASECLASS }}() { {{ column.property_name }} = {{ VALUE }} };
		//
		//	Assert.AreEqual(expected, actual.{{ column.property_name }});
		//}

		{% endfor -%}

		#endregion
	}
}