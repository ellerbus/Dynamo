{% capture BASECLASS %}{{ table.class_name }}{% endcapture -%}
{% capture CAMELCLASS %}{{ table.class_name | camel }}{% endcapture -%}
{% capture FACTORY %}{{ BASECLASS }}Factory{% endcapture -%}
{% capture FORM %}{{ CAMELCLASS }}Form{% endcapture -%}
{% capture PROJECT %}{{ SOLUTION }}.Web{% endcapture -%}
{% capture FILENAME %}{{ PROJECT }}\App\{{ BASECLASS | plural }}\{{ CAMELCLASS }}.controller.js{% endcapture -%}

(function ()
{
	'use strict';
	
	function applyError(error, vm, form)
	{
		var d = error.data;

		var i = 0;

		vm.serverErrors = [];

		if (error.status == 404 && error.statusText)
		{
			vm.serverErrors[i++] = error.statusText;
		}

		if (d)
		{
			if (d.message)
			{
				vm.serverErrors[i++] = d.message;
			}

			if (d.exceptionMessage)
			{
				vm.serverErrors[i++] = d.exceptionMessage;
			}
		}

		for (var prop in vm.user)
		{
			if (form && form[prop])
			{
				form[prop].$setValidity('server', true);
			}
		}

		if (d && d.modelState)
		{
			for (var key in d.modelState)
			{
				var msg = d.modelState[key];

				if (form && form[key])
				{
					form[key].$setValidity('server', false);

				}

				var isArray = Array.isArray(msg);

				vm.serverErrors[key] = isArray ? msg.join(' ') : msg;

				if (isArray)
				{
					for (var mkey in msg)
					{
						vm.serverErrors[i++] = msg[mkey];
					}
				}
				else
				{
					vm.serverErrors[i++] = msg;
				}
			}
		}
	}

	//	setup the application controllers for multiple and single interactions
	angular
		.module('app.{{ CAMELCLASS | plural }}')
		.controller('{{ BASECLASS | plural }}Controller', {{ BASECLASS | plural }}Controller)
		.controller('{{ BASECLASS }}Controller', {{ BASECLASS }}Controller);

	{{ BASECLASS | plural }}Controller.$inject = ['{{ FACTORY }}', '$log'];
	{{ BASECLASS }}Controller.$inject = ['{{ FACTORY }}', '$routeParams', '$scope', '$location', '$log'];

	function {{ BASECLASS | plural }}Controller({{ FACTORY }}, $log)
	{
		var vm = this;
		
		vm.hasData = false;
		
		var queryParams = {};

		{{ FACTORY }}.query(queryParams).$promise.then(handleQuerySuccess, handleQueryError);
		
		function handleQuerySuccess(data)
		{
			vm.{{ CAMELCLASS | plural }} = data;
			
			vm.hasData = true;
		}
		
		function handleQueryError(error)
		{
			applyError(error, vm);
			
			vm.hasData = true;
		}
	}

	function {{ BASECLASS }}Controller({{ FACTORY }}, $routeParams, $scope, $location, $log)
	{
		var vm = this;
		
		vm.hasData = false;
			
		vm.serverErrorSummary = [];

		vm.serverErrors = {};
		
		vm.action = $routeParams.action;
		
		vm.save = save;
		
		if (vm.action == 'create')
		{
			handleGetSuccess({ });
				
			vm.hasData = true;
		}
		else
		{
			var pk =
			{
				{% for column in table.primary_keys %}{{ column.parameter_name }}: $routeParams.{{ column.parameter_name }}{% if forloop.last == false %},
				{% endif %}{% endfor %}
			};
			
			{{ FACTORY }}.get(pk).$promise.then(handleGetSuccess, handleGetError);
		}

		function save(data)
		{
			if (vm.action == 'create')
			{
				{{ FACTORY }}.add(data).$promise.then(handleSaveSuccess, handleSaveError);
			}
			else
			{
				var pk =
				{
					{% for column in table.primary_keys %}{{ column.parameter_name }}: $routeParams.{{ column.parameter_name }}{% if forloop.last == false %},
					{% endif %}{% endfor %}
				};

				if (vm.action == 'update')
				{
					{{ FACTORY }}.update(pk, data).$promise.then(handleSaveSuccess, handleSaveError);
				}
				else if (vm.action == 'delete')
				{
					{{ FACTORY }}.delete(pk).$promise.then(handleSaveSuccess, handleSaveError);
				}
			}
		}
		
		function handleSaveSuccess(data)
		{
			$location.path('/{{ CAMELCLASS | plural }}');
		}
		
		function handleSaveError(error)
		{
			applyError(error, vm, $scope.{{ FORM }});
		}
		
		function handleGetSuccess(data)
		{
			vm.{{ CAMELCLASS }} = data;
			
			vm.hasData = true;
		}
		
		function handleGetError(error)
		{
			applyError(error, vm);
			
			vm.hasData = true;
		}
	}

})();