{% include 'NamingConventions' -%}
{% capture FACTORY %}{{ BASECLASS }}Factory{% endcapture -%}
{% capture FORM %}{{ CAMELCLASS }}Form{% endcapture -%}
{% capture PROJECT %}{{ SOLUTION }}.Web{% endcapture -%}
{% capture FILENAME %}{{ PROJECT }}\App\{{ BASECLASSES }}\{{ CAMELCLASS }}.controller.js{% endcapture -%}

(function ()
{
	'use strict';
	
	function applyError(error, vm, form)
	{
		var d = error.data;

		var i = 0;

		vm.serverErrors = [];

		if (error.status == 404 && error.statusText)
		{
			vm.serverErrors[i++] = error.statusText;
		}

		if (d)
		{
			if (d.message)
			{
				vm.serverErrors[i++] = d.message;
			}

			if (d.exceptionMessage)
			{
				vm.serverErrors[i++] = d.exceptionMessage;
			}
		}

		for (var prop in vm.user)
		{
			if (form && form[prop])
			{
				form[prop].$setValidity('server', true);
			}
		}

		if (d && d.modelState)
		{
			for (var key in d.modelState)
			{
				var msg = d.modelState[key];

				if (form && form[key])
				{
					form[key].$setValidity('server', false);
				}

				var isArray = Array.isArray(msg);

				vm.serverErrors[key] = isArray ? msg.join(' ') : msg;

				if (isArray)
				{
					for (var mkey in msg)
					{
						vm.serverErrors[i++] = msg[mkey];
					}
				}
				else
				{
					vm.serverErrors[i++] = msg;
				}
			}
		}
	}

	//	setup the application controllers for multiple and single interactions
	angular
		.module('app.{{ CAMELCLASSES }}')
		.controller('{{ BASECLASS }}ListController', {{ BASECLASS  }}ListController)
		.controller('{{ BASECLASS }}DetailController', {{ BASECLASS }}DetailController);

	{{ BASECLASS }}ListController.$inject = ['{{ FACTORY }}', '$log'];
	{{ BASECLASS }}DetailController.$inject = ['{{ FACTORY }}', '$routeParams', '$scope', '$location', '$log'];

	//
	//	List Controller
	//
	function {{ BASECLASS }}ListController({{ FACTORY }}, $log)
	{
		//	member variables
		var vm = this;
		
		var queryParams = {};

		{{ FACTORY }}.query(queryParams).$promise.then(querySuccess, queryError);
		
		//	public methods (via VM - View Model)
		
		vm.hasData = hasData;
		
		//	private methods (of the controller)
		
		function hasData()
		{
			return typeof vm.{{ CAMELCLASSES }} != 'undefined';
		}
		
		function querySuccess(data)
		{
			vm.{{ CAMELCLASSES }} = data;
		}
		
		function queryError(error)
		{
			applyError(error, vm);
		}
	}

	//
	//	Details Controller
	//
	function {{ BASECLASS }}DetailController({{ FACTORY }}, $routeParams, $scope, $location, $log)
	{
		//	member variables
		
		var vm = this;

		vm.serverErrors = {};
		
		vm.action = $routeParams.action;

		if (vm.action == 'create')
		{
			getSuccess({ });
		}
		else
		{
			var pk =
			{
				{% for column in table.primary_keys %}{{ column.parameter_name }}: $routeParams.{{ column.parameter_name }}{% if forloop.last == false %},
				{% endif %}{% endfor %}
			};
			
			{{ FACTORY }}.get(pk).$promise.then(getSuccess, getError);
		}
		
		//	public methods (via VM - View Model)
		
		vm.hasData = hasData;

		vm.save = save;
		
		//	private methods (of the controller)
		
		function hasData()
		{
			return typeof vm.{{ CAMELCLASS }} != 'undefined';
		}

		function save(data)
		{
			if (vm.action == 'create')
			{
				{{ FACTORY }}.add(data).$promise.then(saveSuccess, saveError);
			}
			else
			{
				var pk =
				{
					{% for column in table.primary_keys %}{{ column.parameter_name }}: $routeParams.{{ column.parameter_name }}{% if forloop.last == false %},
					{% endif %}{% endfor %}
				};

				if (vm.action == 'update')
				{
					{{ FACTORY }}.update(pk, data).$promise.then(saveSuccess, saveError);
				}
				else if (vm.action == 'delete')
				{
					{{ FACTORY }}.delete(pk).$promise.then(saveSuccess, saveError);
				}
			}
		}
		
		function saveSuccess(data)
		{
			$location.path('/{{ CAMELCLASSES }}');
		}
		
		function saveError(error)
		{
			applyError(error, vm, $scope.{{ FORM }});
		}
		
		function getSuccess(data)
		{
			vm.{{ CAMELCLASS }} = data;
		}
		
		function getError(error)
		{
			applyError(error, vm);
		}
	}

})();