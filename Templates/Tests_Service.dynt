{% capture BASECLASS %}{{ table.class_name }}{% endcapture -%}
{% capture ITEM %}{{ BASECLASS | camel }}{% endcapture -%}
{% capture ITEMS %}{{ ITEM | plural }}{% endcapture -%}
{% capture TEST %}{{ BASECLASS }}ServiceTests{% endcapture -%}
{% capture SERVICE %}{{ BASECLASS }}Service{% endcapture -%}
{% capture REPO %}I{{ BASECLASS }}Repository{% endcapture -%}
{% capture PROJECT %}{{ SOLUTION }}.Tests{% endcapture -%}
{% capture FILENAME %}{{ PROJECT }}\Core\Services\{{ TEST }}.cs{% endcapture -%}
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AutoMoq;
using FluentValidation;
using FluentValidation.Results;
using FizzWare.NBuilder;
using Moq;
using {{ SOLUTION }}.Core.Models;
using {{ SOLUTION }}.Core.Repositories;
using {{ SOLUTION }}.Core.Services;

namespace {{ PROJECT }}.Core.Services
{
	[TestClass]
	public class {{ TEST }}
	{
		#region Helpers/Test Initializers

		private AutoMoqer Mocker { get; set; }
		private Mock<{{ REPO }}> MockRepo { get; set; }
		private Mock<IValidator<{{ BASECLASS }}>> MockValidator { get; set; }
		private {{ SERVICE }} SubjectUnderTest { get; set; }

		[TestInitialize]
		public void TestInitialize()
		{
			Mocker = new AutoMoqer();

			SubjectUnderTest = Mocker.Create<{{ SERVICE }}>();
			
			MockRepo = Mocker.GetMock<{{ REPO }}>();

			MockValidator = Mocker.GetMock<IValidator<{{ BASECLASS }}>>();
		}

		#endregion

		#region Tests - Get
		
		[TestMethod]
		public void {{ SERVICE }}_GetMany_Should_Succeed()
		{
			//	arrange
			var {{ ITEMS }} = Builder<{{ BASECLASS }}>.CreateListOfSize(10).Build(); 
		
			MockRepo.Setup(x => x.GetList()).Returns({{ ITEMS }});

			//	act
			var actual = SubjectUnderTest.GetList();

			//	assert
			CollectionAssert.AreEqual({{ ITEMS }} as ICollection, actual as ICollection);

			MockRepo.VerifyAll();
		}

		[TestMethod]
		public void {{ SERVICE }}_GetOne_Should_Succeed()
		{
			//	arrange
			var {{ ITEM }} = Builder<{{ BASECLASS }}>.CreateNew().Build();
			
			MockRepo.Setup(x => x.Get({% for column in table.primary_keys %}{{ ITEM }}.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns({{ ITEM }});

			//	act
			var actual = SubjectUnderTest.Get({% for column in table.primary_keys %}{{ ITEM }}.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});

			//	assert
			Assert.IsNotNull(actual);			
			{% for column in table.columns %}
			Assert.AreEqual({{ ITEM }}.{{ column.property_name }}, actual.{{ column.property_name }});{% endfor %}

			MockRepo.VerifyAll();
		}
		
		#endregion
		
		#region Tests - Save

		[TestMethod]
		public void {{ SERVICE }}_Save_Should_Succeed()
		{
			//	arrange
			var {{ ITEM }} = Builder<{{ BASECLASS }}>.CreateNew().Build();
			
			MockRepo.Setup(x => x.Save({{ ITEM }}));

			MockValidator.Setup(x => x.Validate({{ ITEM }})).Returns(new ValidationResult());

			//	act
			SubjectUnderTest.Save({{ ITEM }});

			//	assert

			MockRepo.VerifyAll();
			MockValidator.VerifyAll();
		}

		[TestMethod, ExpectedException(typeof(ValidationException))]
		public void {{ SERVICE }}_Save_Should_ThrowException()
		{
			//	arrange
			var {{ ITEM }} = Builder<{{ BASECLASS }}>.CreateNew().Build();

			MockRepo.Setup(x => x.Insert({{ ITEM }}));

			MockValidator.Setup(x => x.Validate({{ ITEM }})).Returns(new ValidationResult(new[] { new ValidationFailure("", "") }));

			//	act
			SubjectUnderTest.Save({{ ITEM }});
		}

		[TestMethod]
		public void {{ SERVICE }}_SaveMany_Should_Succeed()
		{
			//	arrange
			var {{ ITEMS }} = Builder<{{ BASECLASS }}>.CreateListOfSize(10).Build(); 
			
			MockRepo.Setup(x => x.Save({{ ITEMS }}));

			MockValidator.Setup(x => x.Validate(It.IsAny<{{ BASECLASS }}>())).Returns(new ValidationResult());

			//	act
			SubjectUnderTest.Save({{ ITEMS }});

			//	assert

			MockRepo.VerifyAll();
			MockValidator.VerifyAll();
		}

		[TestMethod, ExpectedException(typeof(ValidationException))]
		public void {{ SERVICE }}_SaveMany_Should_ThrowException()
		{
			//	arrange
			var {{ ITEMS }} = Builder<{{ BASECLASS }}>.CreateListOfSize(10).Build(); 

			MockRepo.Setup(x => x.Save({{ ITEMS }}));

			MockValidator.Setup(x => x.Validate(It.IsAny<{{ BASECLASS }}>())).Returns(new ValidationResult(new[] { new ValidationFailure("", "") }));

			//	act
			SubjectUnderTest.Save({{ ITEMS }});
		}
		
		#endregion
		
		#region Tests - Insert

		[TestMethod]
		public void {{ SERVICE }}_Insert_Should_Succeed()
		{
			//	arrange
			var {{ ITEM }} = Builder<{{ BASECLASS }}>.CreateNew().Build();
			
			MockRepo.Setup(x => x.Insert({{ ITEM }}));

			MockValidator.Setup(x => x.Validate({{ ITEM }})).Returns(new ValidationResult());

			//	act
			SubjectUnderTest.Insert({{ ITEM }});

			//	assert

			MockRepo.VerifyAll();
			MockValidator.VerifyAll();
		}

		[TestMethod, ExpectedException(typeof(ValidationException))]
		public void {{ SERVICE }}_Insert_Should_ThrowException()
		{
			//	arrange
			var {{ ITEM }} = Builder<{{ BASECLASS }}>.CreateNew().Build();

			MockRepo.Setup(x => x.Insert({{ ITEM }}));

			MockValidator.Setup(x => x.Validate({{ ITEM }})).Returns(new ValidationResult(new[] { new ValidationFailure("", "") }));

			//	act
			SubjectUnderTest.Insert({{ ITEM }});
		}

		[TestMethod]
		public void {{ SERVICE }}_InsertMany_Should_Succeed()
		{
			//	arrange
			var {{ ITEMS }} = Builder<{{ BASECLASS }}>.CreateListOfSize(10).Build(); 
			
			MockRepo.Setup(x => x.Insert({{ ITEMS }}));

			MockValidator.Setup(x => x.Validate(It.IsAny<{{ BASECLASS }}>())).Returns(new ValidationResult());

			//	act
			SubjectUnderTest.Insert({{ ITEMS }});

			//	assert

			MockRepo.VerifyAll();
			MockValidator.VerifyAll();
		}

		[TestMethod, ExpectedException(typeof(ValidationException))]
		public void {{ SERVICE }}_InsertMany_Should_ThrowException()
		{
			//	arrange
			var {{ ITEMS }} = Builder<{{ BASECLASS }}>.CreateListOfSize(10).Build(); 

			MockRepo.Setup(x => x.Insert({{ ITEMS }}));

			MockValidator.Setup(x => x.Validate(It.IsAny<{{ BASECLASS }}>())).Returns(new ValidationResult(new[] { new ValidationFailure("", "") }));

			//	act
			SubjectUnderTest.Insert({{ ITEMS }});
		}
		
		#endregion
		
		#region Tests - Update

		[TestMethod]
		public void {{ SERVICE }}_Update_Should_Succeed()
		{
			//	arrange
			var {{ ITEM }} = Builder<{{ BASECLASS }}>.CreateNew().Build();
			
			MockRepo.Setup(x => x.Update({{ ITEM }}));

			MockValidator.Setup(x => x.Validate({{ ITEM }})).Returns(new ValidationResult());

			//	act
			SubjectUnderTest.Update({{ ITEM }});

			//	assert

			MockRepo.VerifyAll();
			MockValidator.VerifyAll();
		}

		[TestMethod, ExpectedException(typeof(ValidationException))]
		public void {{ SERVICE }}_Update_Should_ThrowException()
		{
			//	arrange
			var {{ ITEM }} = Builder<{{ BASECLASS }}>.CreateNew().Build();

			MockRepo.Setup(x => x.Update({{ ITEM }}));

			MockValidator.Setup(x => x.Validate({{ ITEM }})).Returns(new ValidationResult(new[] { new ValidationFailure("", "") }));

			//	act
			SubjectUnderTest.Update({{ ITEM }});
		}

		[TestMethod]
		public void {{ SERVICE }}_UpdateMany_Should_Succeed()
		{
			//	arrange
			var {{ ITEMS }} = Builder<{{ BASECLASS }}>.CreateListOfSize(10).Build(); 
			
			MockRepo.Setup(x => x.Update({{ ITEMS }}));

			MockValidator.Setup(x => x.Validate(It.IsAny<{{ BASECLASS }}>())).Returns(new ValidationResult());

			//	act
			SubjectUnderTest.Update({{ ITEMS }});

			//	assert

			MockRepo.VerifyAll();
			MockValidator.VerifyAll();
		}

		[TestMethod, ExpectedException(typeof(ValidationException))]
		public void {{ SERVICE }}_UpdateMany_Should_ThrowException()
		{
			//	arrange
			var {{ ITEMS }} = Builder<{{ BASECLASS }}>.CreateListOfSize(10).Build(); 

			MockRepo.Setup(x => x.Update({{ ITEMS }}));

			MockValidator.Setup(x => x.Validate(It.IsAny<{{ BASECLASS }}>())).Returns(new ValidationResult(new[] { new ValidationFailure("", "") }));

			//	act
			SubjectUnderTest.Update({{ ITEMS }});
		}
		
		#endregion
		
		#region Tests - Delete

		[TestMethod]
		public void {{ SERVICE }}_Delete_Should_Succeed()
		{
			//	arrange
			var {{ ITEM }} = Builder<{{ BASECLASS }}>.CreateNew().Build();
			
			MockRepo.Setup(x => x.Delete({{ ITEM }}));

			//	act
			SubjectUnderTest.Delete({{ ITEM }});

			//	assert

			MockRepo.VerifyAll();
		}

		[TestMethod]
		public void {{ SERVICE }}_DeleteMany_Should_Succeed()
		{
			//	arrange
			var {{ ITEMS }} = Builder<{{ BASECLASS }}>.CreateListOfSize(10).Build(); 
			
			MockRepo.Setup(x => x.Delete({{ ITEMS }}));

			//	act
			SubjectUnderTest.Delete({{ ITEMS }});

			//	assert

			MockRepo.VerifyAll();
		}

		#endregion
	}
}