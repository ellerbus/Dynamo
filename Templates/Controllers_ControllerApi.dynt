{% capture BASECLASS %}{{ table.class_name }}{% endcapture -%}
{% capture CONTROLLER %}{{ BASECLASS | plural }}Controller{% endcapture -%}
{% capture SERVICE %}I{{ BASECLASS }}Service{% endcapture -%}
{% capture PROJECT %}{{ SOLUTION }}.Web{% endcapture -%}
{% capture CORE %}{{ SOLUTION }}.Core{% endcapture -%}
{% capture FILENAME %}{{ PROJECT }}\ApiControllers\{{ CONTROLLER }}.cs{% endcapture -%}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using FluentValidation;
using FluentValidation.Results;
using {{ CORE }}.Models;
using {{ CORE }}.Services;
using {{ CORE }}.Validators;

namespace {{ PROJECT }}.ApiControllers
{
	///	<summary>
	/// Represents a basic controller for {{ BASECLASS }}
	///	</summary>
	[RoutePrefix("api/{{ BASECLASS | camel | plural }}")]
	public class {{ CONTROLLER }} : ApiController
	{
		#region Members
	
		private {{ SERVICE }} _service;
		
		#endregion
		
		#region Contructors

		public {{ CONTROLLER }}({{ SERVICE }} service)
		{
			_service = service;
		}
		
		#endregion
		
		#region Verb Actions

		// GET: api/{{ BASECLASS | camel }}
		[HttpGet, Route("")]
		public IEnumerable<{{ BASECLASS }}> GetAll()
		{
			return _service.GetList();
		}

		// GET: api/{{ BASECLASS | camel }}/5
		[HttpGet, Route("{% for column in table.primary_keys %}{{ "{" }}{{ column.parameter_name }}}{%if forloop.last == false %}/{% endif %}{% endfor %}"), ResponseType(typeof({{ BASECLASS }}))]
		public IHttpActionResult Get({% for column in table.primary_keys %}{{ column.clr_type }} {{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})
		{
			{{ BASECLASS }} {{ BASECLASS | camel }} = _service.Get({% for column in table.primary_keys %}{{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});
			
			if ({{ BASECLASS | camel }} == null)
			{
				return NotFound();
			}

			return Ok({{ BASECLASS | camel }});
		}

		// POST: api/{{ BASECLASS | camel }}
		[HttpPost, Route("")]
		public IHttpActionResult Post([FromBody]{{ BASECLASS }} {{ BASECLASS | camel }})
		{
			try
			{
				_service.Insert({{ BASECLASS | camel }});

				return Ok();
			}
			catch (ValidationException ve)
			{
				return BadRequest(ve.Errors);
			}
		}

		// PUT: api/{{ BASECLASS | camel }}/5
		[HttpPut, Route("{% for column in table.primary_keys %}{{ "{" }}{{ column.parameter_name }}}{%if forloop.last == false %}/{% endif %}{% endfor %}")]
		public IHttpActionResult Put({% for column in table.primary_keys %}{{ column.clr_type }} {{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %}, [FromBody]{{ BASECLASS }} {{ BASECLASS | camel }})
		{
			{{ BASECLASS }} model = _service.Get({% for column in table.primary_keys %}{{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});

			if (model == null)
			{
				return NotFound();
			}
			{% for column in table.columns %}{% if column.is_primary_key == false %}
			model.{{ column.name | pascal | remove:BASECLASS }} = {{ BASECLASS | camel }}.{{ column.name | pascal | remove:BASECLASS }};{% endif %}{% endfor -%}

			try
			{
				_service.Update(model);

				return Ok();
			}
			catch (ValidationException ve)
			{
				return BadRequest(ve.Errors);
			}
		}

		// DELETE: api/{{ BASECLASS | camel }}/5
		[HttpDelete, Route("{% for column in table.primary_keys %}{{ "{" }}{{ column.parameter_name }}}{%if forloop.last == false %}/{% endif %}{% endfor %}")]
		public IHttpActionResult Delete({% for column in table.primary_keys %}{{ column.clr_type }} {{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})
		{
			{{ BASECLASS }} model = _service.Get({% for column in table.primary_keys %}{{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});

			if (model == null)
			{
				return NotFound();
			}
			
			try
			{
				_service.Delete(model);
			
				return Ok();
			}
			catch (ValidationException ve)
			{
				return BadRequest(ve.Errors);
			}
		}
		
		#endregion

		#region Helpers

		private IHttpActionResult BadRequest(IEnumerable<ValidationFailure> errors)
		{
			foreach (ValidationFailure vf in errors)
			{
				ModelState.AddModelError(vf.PropertyName, vf.ErrorMessage);
			}
		
			return BadRequest(ModelState);
		}
		
		#endregion
	}
}
