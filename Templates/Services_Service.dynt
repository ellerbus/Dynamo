{% include 'NamingConventions' -%}
{% capture SERVICE %}{{ BASECLASS }}Service{% endcapture -%}
{% capture REPO %}I{{ BASECLASS }}Repository{% endcapture -%}
{% capture VALIDATOR %}IValidator<{{ BASECLASS }}>{% endcapture -%}
{% capture PROJECT %}{{ SOLUTION }}.Core{% endcapture -%}
{% capture FILENAME %}{{ PROJECT }}\Services\{{ SERVICE }}.cs{% endcapture -%}
using System;
using System.Collections.Generic;
using System.Linq;
using FluentValidation;
using {{ PROJECT }}.Repositories;
using {{ PROJECT }}.Models;

namespace {{ PROJECT }}.Services
{
	#region Service interface
	
	/// <summary>
	/// Service Interface for {{ BASECLASS }}
	/// </summary>
	public interface {{ ISERVICE }}
	{
		/// <summary>
		/// Gets a list of {{ BASECLASSES }}
		/// </summary>
		/// <returns></returns>
		IList<{{ BASECLASS }}> GetList();

		/// <summary>
		/// Gets a singe {{ BASECLASS }} based on the given primary key
		/// </summary>
		{{ BASECLASS }} Get({% for column in table.primary_keys %}{{ column.clr_type }} {{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});
		
		///// <summary>
		///// Saves a {{ BASECLASS }}
		///// </summary>
		//void Save({{ BASECLASS }} {{ CAMELCLASS }});
		
		///// <summary>
		///// Saves a list of {{ BASECLASS }}
		///// </summary>
		//void Save(IEnumerable<{{ BASECLASS }}> {{ CAMELCLASSES }});
		
		/// <summary>
		/// Inserts a {{ BASECLASS }}
		/// </summary>
		void Insert({{ BASECLASS }} {{ CAMELCLASS }});

		/// <summary>
		/// Inserts a list of {{ BASECLASS }}
		/// </summary>
		void Insert(IEnumerable<{{ BASECLASS }}> {{ CAMELCLASSES }});
		
		/// <summary>
		/// Updates a {{ BASECLASS }}
		/// </summary>
		void Update({{ BASECLASS }} {{ CAMELCLASS }});

		/// <summary>
		/// Updates a list of {{ BASECLASS }}
		/// </summary>
		void Update(IEnumerable<{{ BASECLASS }}> {{ CAMELCLASSES }});
		
		/// <summary>
		/// Deletes a {{ BASECLASS }}
		/// </summary>
		void Delete({{ BASECLASS }} {{ CAMELCLASS }});

		/// <summary>
		/// Deletes a list of {{ BASECLASS }}
		/// </summary>
		void Delete(IEnumerable<{{ BASECLASS }}> {{ CAMELCLASSES }});
	}
	
	#endregion

	/// <summary>
	/// Service Implementation for {{ BASECLASS }}
	/// </summary>
	public class {{ SERVICE }} : {{ ISERVICE }}
	{
		#region Members

		private {{ IREPOSITORY }} _repository;
		private {{ IVALIDATOR }} _validator;

		#endregion

		#region Constructors

		/// <summary>
		/// Creates a new instance
		/// </summary>
		public {{ SERVICE }}({{ IREPOSITORY }} repository, {{ IVALIDATOR }} validator)
		{
			_repository = repository;
			_validator = validator;
		}

		#endregion

		#region Methods

		/// <summary>
		/// Gets a list of {{ BASECLASSES }}
		/// </summary>
		/// <returns></returns>
		public IList<{{ BASECLASS }}> GetList()
		{
			return _repository.GetList();
		}

		/// <summary>
		/// Gets a singe {{ BASECLASS }} based on the given primary key
		/// </summary>
		public {{ BASECLASS }} Get({% for column in table.primary_keys %}{{ column.clr_type }} {{ column.parameter_name }}{% if forloop.last == false %}, {% endif %}{% endfor %})
		{
			{{ BASECLASS }} {{ CAMELCLASS }} = _repository.Get({% for column in table.primary_keys %}{{ column.parameter_name }}{% if forloop.last == false %}, {% endif %}{% endfor %});
			
			return {{ CAMELCLASS }};
		}
		
		/// <summary>
		/// Saves a {{ BASECLASS }}
		/// </summary>
		/// <returns></returns>
		public void Save({{ BASECLASS }} {{ CAMELCLASS }})
		{
			_validator.ValidateAndThrow({{ CAMELCLASS }});

			_repository.Save({{ CAMELCLASS }});
		}
		
		/// <summary>
		/// Saves a list of {{ BASECLASS | | plural }}
		/// </summary>
		/// <returns></returns>
		public void Save(IEnumerable<{{ BASECLASS }}> {{ CAMELCLASSES }})
		{
			foreach ({{ BASECLASS }} {{ CAMELCLASS }} in {{ CAMELCLASSES }})
			{
				_validator.ValidateAndThrow({{ CAMELCLASS }});
			}

			_repository.Save({{ CAMELCLASSES }});
		}
		
		/// <summary>
		/// Inserts a {{ BASECLASS }}
		/// </summary>
		public void Insert({{ BASECLASS }} {{ CAMELCLASS }})
		{
			_validator.ValidateAndThrow({{ CAMELCLASS }});

			_repository.Insert({{ CAMELCLASS }});
		}
		
		/// <summary>
		/// Inserts a list of {{ BASECLASS }}
		/// </summary>
		public void Insert(IEnumerable<{{ BASECLASS }}> {{ CAMELCLASSES }})
		{
			foreach ({{ BASECLASS }} {{ CAMELCLASS }} in {{ CAMELCLASSES }})
			{
				_validator.ValidateAndThrow({{ CAMELCLASS }});
			}

			_repository.Insert({{ CAMELCLASSES }});
		}
		
		/// <summary>
		/// Updates a {{ BASECLASS }}
		/// </summary>
		public void Update({{ BASECLASS }} {{ CAMELCLASS }})
		{
			_validator.ValidateAndThrow({{ CAMELCLASS }});

			_repository.Update({{ CAMELCLASS }});
		}
		
		/// <summary>
		/// Updates a list of {{ BASECLASS }}
		/// </summary>
		public void Update(IEnumerable<{{ BASECLASS }}> {{ CAMELCLASSES }})
		{
			foreach ({{ BASECLASS }} {{ CAMELCLASS }} in {{ CAMELCLASSES }})
			{
				_validator.ValidateAndThrow({{ CAMELCLASS }});
			}

			_repository.Update({{ CAMELCLASSES }});
		}
		
		/// <summary>
		/// Deletes a {{ BASECLASS }}
		/// </summary>
		public void Delete({{ BASECLASS }} {{ CAMELCLASS }})
		{
			_repository.Delete({{ CAMELCLASS }});
		}
		
		/// <summary>
		/// Deletes a list of {{ BASECLASS }}
		/// </summary>
		public void Delete(IEnumerable<{{ BASECLASS }}> {{ CAMELCLASSES }})
		{
			_repository.Delete({{ CAMELCLASSES }});
		}

		#endregion
	}
}