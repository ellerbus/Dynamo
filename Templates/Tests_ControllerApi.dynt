{% capture BASECLASS %}{{ table.class_name }}{% endcapture -%}
{% capture CONTROLLER %}{{ BASECLASS | plural }}Controller{% endcapture -%}
{% capture SERVICE %}I{{ BASECLASS }}Service{% endcapture -%}
{% capture VALIDATOR %}IValidator<{{ BASECLASS }}>{% endcapture -%}
{% capture TEST %}{{ CONTROLLER }}Tests{% endcapture -%}
{% capture PROJECT %}{{ SOLUTION }}.Tests{% endcapture -%}
{% capture CORE %}{{ SOLUTION }}.Core{% endcapture -%}
{% capture FILENAME %}{{ PROJECT }}\Web\ApiControllers\{{ TEST }}.cs{% endcapture -%}
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AutoMoq;
using FizzWare.NBuilder;
using Moq;
using FluentValidation;
using FluentValidation.Results;
using {{ CORE }}.Models;
using {{ CORE }}.Services;
using {{ CORE }}.Validators;
using {{ SOLUTION }}.Web.ApiControllers;

namespace {{ PROJECT }}.ApiControllers
{
	[TestClass]
	public class {{ TEST }}
	{
		#region Helpers/Test Initializers

		private AutoMoqer Mocker { get; set; }
		private Mock<{{ SERVICE }}> MockService { get; set; }
		private Mock<{{ VALIDATOR }}> MockValidator { get; set; }
		private {{ CONTROLLER }} SubjectUnderTest { get; set; }

		[TestInitialize]
		public void TestInitialize()
		{
			Mocker = new AutoMoqer();

			SubjectUnderTest = Mocker.Create<{{ CONTROLLER }}>();
			
			MockService = Mocker.GetMock<{{ SERVICE }}>();
			MockValidator = Mocker.GetMock<{{ VALIDATOR }}>();
		}

		#endregion

		#region Tests - Get All
		
		[TestMethod]
		public void {{ CONTROLLER }}_Should_GetAll()
		{
			//	arrange
			var expected = Builder<{{ BASECLASS }}>.CreateListOfSize(10).Build();

			MockService.Setup(x => x.Get()).Returns(expected);

			//	act
			var actual = SubjectUnderTest.GetAll();

			//	assert
			CollectionAssert.AreEqual(expected as ICollection, actual as ICollection);
			
			MockService.VerifyAll();
			MockValidator.VerifyAll();
		}

		#endregion

		#region Tests - Get One
		
		[TestMethod]
		public void {{ CONTROLLER }}_Should_GetOne()
		{
			//	arrange
			var expected = Builder<{{ BASECLASS }}>.CreateNew().Build();
			
			MockService.Setup(x => x.Get({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns(expected);

			//	act
			var actual = SubjectUnderTest.Get({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});

			//	assert
			Assert.IsNotNull(actual);			
			{% for column in table.columns %}
			Assert.AreEqual(expected.{{ column.property_name }}, actual.{{ column.property_name }});{% endfor %}
			
			MockService.VerifyAll();
			MockValidator.VerifyAll();
		}

		#endregion

		#region Tests - Post One
		
		[TestMethod]
		public void {{ CONTROLLER }}_Should_PostOne()
		{
			//	arrange
			var expected = Builder<{{ BASECLASS }}>.CreateNew().Build();

			MockValidator.Setup(x => x.Validate(expected)).Returns(new ValidationResult(new ValidationFailure[0]));
			
			MockService.Setup(x => x.Insert(expected));

			//	act
			SubjectUnderTest.Post(expected);

			//	assert
			
			MockService.VerifyAll();
			MockValidator.VerifyAll();
		}

		#endregion

		#region Tests - Put One
		
		[TestMethod]
		public void {{ CONTROLLER }}_Should_PutOne()
		{
			//	arrange
			var expected = Builder<{{ BASECLASS }}>.CreateNew().Build();

			MockValidator.Setup(x => x.Validate(expected)).Returns(new ValidationResult(new ValidationFailure[0]));
			
			MockService.Setup(x => x.Get({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns(expected);
			
			MockService.Setup(x => x.Update(expected));

			//	act
			SubjectUnderTest.Put({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %}, expected);

			//	assert
			
			MockService.VerifyAll();
			MockValidator.VerifyAll();
		}

		#endregion

		#region Tests - Delete One
		
		[TestMethod]
		public void {{ CONTROLLER }}_Should_DeleteOne()
		{
			//	arrange
			var expected = Builder<{{ BASECLASS }}>.CreateNew().Build();
			
			MockService.Setup(x => x.Get({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns(expected);
			
			MockService.Setup(x => x.Delete(expected));

			//	act
			SubjectUnderTest.Delete({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});

			//	assert
			
			MockService.VerifyAll();
			MockValidator.VerifyAll();
		}

		#endregion
/*		
		#region Verb Actions

		// GET: api/{{ BASECLASS | camel }}
		[HttpGet, Route("")]
		public IEnumerable<{{ BASECLASS }}> GetAll()
		{
			return _service.Get();
		}

		// GET: api/{{ BASECLASS | camel }}/5
		[HttpGet, Route("{% for column in table.primary_keys %}{{ "{" }}{{ column.parameter_name }}}{%if forloop.last == false %}/{% endif %}{% endfor %}")]
		public {{ BASECLASS }} Get({% for column in table.primary_keys %}{{ column.clr_type }} {{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})
		{
			{{ BASECLASS }} {{ BASECLASS | camel }} = _service.Get({% for column in table.primary_keys %}{{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});
			
			if ({{ BASECLASS | camel }} == null)
			{
			
			}

			return {{ BASECLASS | camel }};
		}

		// POST: api/{{ BASECLASS | camel }}
		[HttpPost, Route("")]
		public void Post([FromBody]{{ BASECLASS }} {{ BASECLASS | camel }})
		{
			ValidationResult vr = _validator.Validate({{ BASECLASS | camel }});

			if (vr.IsValid)
			{
				_service.Save({{ BASECLASS | camel }});

				return;
			}
			
			throw new NotImplementedException();
		}

		// PUT: api/{{ BASECLASS | camel }}/5
		[HttpPut, Route("{% for column in table.primary_keys %}{{ "{" }}{{ column.parameter_name }}}{%if forloop.last == false %}/{% endif %}{% endfor %}")]
		public void Put({% for column in table.primary_keys %}{{ column.clr_type }} {{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %}, [FromBody]{{ BASECLASS }} {{ BASECLASS | camel }})
		{
			{{ BASECLASS }} model = _service.Get({% for column in table.primary_keys %}{{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});
			{% for column in table.columns %}{% if column.is_primary_key == false %}
			model.{{ column.name | pascal | remove:BASECLASS }} = {{ BASECLASS | camel }}.{{ column.name | pascal | remove:BASECLASS }};{% endif %}{% endfor -%}


			ValidationResult vr = _validator.Validate(model);

			if (vr.IsValid)
			{
				_service.Save(model);

				return;
			}
			
			throw new NotImplementedException();
		}

		// DELETE: api/{{ BASECLASS | camel }}/5
		[HttpDelete, Route("{% for column in table.primary_keys %}{{ "{" }}{{ column.parameter_name }}}{%if forloop.last == false %}/{% endif %}{% endfor %}")]
		public void Delete({% for column in table.primary_keys %}{{ column.clr_type }} {{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})
		{
			{{ BASECLASS }} model = _service.Get({% for column in table.primary_keys %}{{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});

			_service.Delete(model);
		}
		
		#endregion
		*/
	}
}
