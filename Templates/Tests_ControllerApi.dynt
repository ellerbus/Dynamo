{% include 'NamingConventions' -%}
{% capture PROJECT %}{{ SOLUTION }}.Tests{% endcapture -%}
{% capture CORE %}{{ SOLUTION }}.Core{% endcapture -%}
{% capture WEB %}{{ SOLUTION }}.Web{% endcapture -%}
{% capture FILENAME %}{{ PROJECT }}\Web\ApiControllers\{{ CONTROLLER }}Tests.cs{% endcapture -%}
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AutoMoq;
using FizzWare.NBuilder;
using FluentValidation;
using FluentValidation.Results;
using Moq;
using {{ CORE }}.Models;
using {{ CORE }}.Services;
using {{ WEB }}.ApiControllers;

namespace {{ PROJECT }}.Web.ApiControllers
{
	[TestClass]
	public class {{ CONTROLLER }}Tests
	{
		#region Helpers/Test Initializers

		private AutoMoqer Mocker { get; set; }
		private Mock<{{ ISERVICE }}> MockService { get; set; }
		private {{ CONTROLLER }} SubjectUnderTest { get; set; }

		[TestInitialize]
		public void TestInitialize()
		{
			Mocker = new AutoMoqer();

			SubjectUnderTest = Mocker.Create<{{ CONTROLLER }}>();
	
			SubjectUnderTest.Request = new HttpRequestMessage();
			SubjectUnderTest.Configuration = new HttpConfiguration();

			MockService = Mocker.GetMock<{{ ISERVICE }}>();
		}

		#endregion

		#region Tests - Get Many/List

		[TestMethod]
		public void {{ CONTROLLER }}_GetAll_Should_SendOk()
		{
			//		arrange
			var {{ CAMELCLASSES }} = Builder<{{ BASECLASS }}>.CreateListOfSize(10).Build();

			MockService.Setup(x => x.GetList()).Returns({{ CAMELCLASSES }});

			//		act
			var result = SubjectUnderTest.GetAll();
			
			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
            Assert.IsTrue(response.Result.IsSuccessStatusCode);

			{{ BASECLASS }}[] actual = null;

			Assert.IsTrue(response.Result.TryGetContentValue<{{ BASECLASS }}[]>(out actual));

			CollectionAssert.AreEqual({{ CAMELCLASSES }} as ICollection, actual as ICollection);
	
			MockService.VerifyAll();
		}

		#endregion

		#region Tests - Get One

		[TestMethod]
		public void {{ CONTROLLER }}_GetOne_Should_SendOk()
		{
			//		arrange
			var {{ CAMELCLASS }} = Builder<{{ BASECLASS }}>.CreateNew().Build();

			MockService.Setup(x => x.Get({% for column in table.primary_keys %}{{ CAMELCLASS }}.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns({{ CAMELCLASS }});

			//		act
			var result = SubjectUnderTest.Get({% for column in table.primary_keys %}{{ CAMELCLASS }}.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
            Assert.IsTrue(response.Result.IsSuccessStatusCode);

			{{ BASECLASS }} actual = null;

			Assert.IsTrue(response.Result.TryGetContentValue<{{ BASECLASS }}>(out actual));
			{% for column in table.columns %}
			Assert.AreEqual({{ CAMELCLASS }}.{{ column.property_name }}, actual.{{ column.property_name }});{% endfor %}
	
			MockService.VerifyAll();
		}

		[TestMethod]
		public void {{ CONTROLLER }}_GetOne_Should_SendNotFound()
		{
			//		arrange
			var {{ CAMELCLASS }} = Builder<{{ BASECLASS }}>.CreateNew().Build();
	
			MockService.Setup(x => x.Get({% for column in table.primary_keys %}{{ CAMELCLASS }}.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns(null as {{ BASECLASS }});

			//		act
			var result = SubjectUnderTest.Get({% for column in table.primary_keys %}{{ CAMELCLASS }}.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
			Assert.IsTrue(response.Result.StatusCode == HttpStatusCode.NotFound);
	
			MockService.VerifyAll();
		}

		#endregion

		#region Tests - Post One

		[TestMethod]
		public void {{ CONTROLLER }}_PostOne_Should_SendOk()
		{
			//		arrange
			var {{ CAMELCLASS }} = Builder<{{ BASECLASS }}>.CreateNew().Build();
	
			MockService.Setup(x => x.Insert({{ CAMELCLASS }}));

			//		act
			var result = SubjectUnderTest.Post({{ CAMELCLASS }});

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
            Assert.IsTrue(response.Result.IsSuccessStatusCode);
	
			MockService.VerifyAll();
		}

		[TestMethod]
		public void {{ CONTROLLER }}_PostOne_Should_SendBadRequest()
		{
			//		arrange
			var {{ CAMELCLASS }} = Builder<{{ BASECLASS }}>.CreateNew().Build();

			MockService.Setup(x => x.Insert({{ CAMELCLASS }})).Throws(new ValidationException(new []{ new ValidationFailure("", "") }));

			//		act
			var result = SubjectUnderTest.Post({{ CAMELCLASS }});

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
			Assert.IsTrue(response.Result.StatusCode == HttpStatusCode.BadRequest);

			MockService.VerifyAll();
		}

		#endregion

		#region Tests - Put One

		[TestMethod]
		public void {{ CONTROLLER }}_PutOne_Should_SendOk()
		{
			//		arrange
			var {{ CAMELCLASS }} = Builder<{{ BASECLASS }}>.CreateNew().Build();
	
			MockService.Setup(x => x.Get({% for column in table.primary_keys %}{{ CAMELCLASS }}.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns({{ CAMELCLASS }});
	
			MockService.Setup(x => x.Update({{ CAMELCLASS }}));

			//		act
			var result = SubjectUnderTest.Put({% for column in table.primary_keys %}{{ CAMELCLASS }}.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %}, {{ CAMELCLASS }});

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
            Assert.IsTrue(response.Result.IsSuccessStatusCode);
	
			MockService.VerifyAll();
		}

		[TestMethod]
		public void {{ CONTROLLER }}_PutOne_Should_SendBadRequest()
		{
			//		arrange
			var {{ CAMELCLASS }} = Builder<{{ BASECLASS }}>.CreateNew().Build();
	
			MockService.Setup(x => x.Get({% for column in table.primary_keys %}{{ CAMELCLASS }}.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns({{ CAMELCLASS }});

			MockService.Setup(x => x.Update({{ CAMELCLASS }})).Throws(new ValidationException(new[] { new ValidationFailure("", "") }));

			//		act
			var result = SubjectUnderTest.Put({% for column in table.primary_keys %}{{ CAMELCLASS }}.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %}, {{ CAMELCLASS }});

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
			Assert.IsTrue(response.Result.StatusCode == HttpStatusCode.BadRequest);

			MockService.VerifyAll();
		}

		[TestMethod]
		public void {{ CONTROLLER }}_PutOne_Should_SendNotFound()
		{
			//		arrange
			var {{ CAMELCLASS }} = Builder<{{ BASECLASS }}>.CreateNew().Build();
	
			MockService.Setup(x => x.Get({% for column in table.primary_keys %}{{ CAMELCLASS }}.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns(null as {{ BASECLASS }});

			//		act
			var result = SubjectUnderTest.Put({% for column in table.primary_keys %}{{ CAMELCLASS }}.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %}, {{ CAMELCLASS }});

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
			Assert.IsTrue(response.Result.StatusCode == HttpStatusCode.NotFound);

			MockService.VerifyAll();
		}

		#endregion

		#region Tests - Delete One

		[TestMethod]
		public void {{ CONTROLLER }}_DeleteOne_Should_SendOk()
		{
			//		arrange
			var {{ CAMELCLASS }} = Builder<{{ BASECLASS }}>.CreateNew().Build();

			MockService.Setup(x => x.Get({% for column in table.primary_keys %}{{ CAMELCLASS }}.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns({{ CAMELCLASS }});

			MockService.Setup(x => x.Delete({{ CAMELCLASS }}));

			//		act
			var result = SubjectUnderTest.Delete({% for column in table.primary_keys %}{{ CAMELCLASS }}.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
            Assert.IsTrue(response.Result.IsSuccessStatusCode);

			MockService.VerifyAll();
		}

		[TestMethod]
		public void {{ CONTROLLER }}_DeleteOne_Should_SendNotFound()
		{
			//		arrange
			var {{ CAMELCLASS }} = Builder<{{ BASECLASS }}>.CreateNew().Build();

			MockService.Setup(x => x.Get({% for column in table.primary_keys %}{{ CAMELCLASS }}.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns(null as {{ BASECLASS }});

			//		act
			var result = SubjectUnderTest.Delete({% for column in table.primary_keys %}{{ CAMELCLASS }}.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
			Assert.IsTrue(response.Result.StatusCode == HttpStatusCode.NotFound);

			MockService.VerifyAll();
		}

		#endregion
	}
}