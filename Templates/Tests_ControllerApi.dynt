{% capture BASECLASS %}{{ table.class_name }}{% endcapture -%}
{% capture CONTROLLER %}{{ BASECLASS | plural }}Controller{% endcapture -%}
{% capture SERVICE %}I{{ BASECLASS }}Service{% endcapture -%}
{% capture TEST %}{{ CONTROLLER }}Tests{% endcapture -%}
{% capture PROJECT %}{{ SOLUTION }}.Tests{% endcapture -%}
{% capture CORE %}{{ SOLUTION }}.Core{% endcapture -%}
{% capture FILENAME %}{{ PROJECT }}\Web\ApiControllers\{{ TEST }}.cs{% endcapture -%}
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AutoMoq;
using FizzWare.NBuilder;
using FluentValidation;
using FluentValidation.Results;
using Moq;
using {{ CORE }}.Models;
using {{ CORE }}.Services;
using {{ SOLUTION }}.Web.ApiControllers;

namespace {{ PROJECT }}.ApiControllers
{
	[TestClass]
	public class {{ TEST }}
	{
		#region Helpers/Test Initializers

		private AutoMoqer Mocker { get; set; }
		private Mock<{{ SERVICE }}> MockService { get; set; }
		private {{ CONTROLLER }} SubjectUnderTest { get; set; }

		[TestInitialize]
		public void TestInitialize()
		{
			Mocker = new AutoMoqer();

			SubjectUnderTest = Mocker.Create<{{ CONTROLLER }}>();
	
			SubjectUnderTest.Request = new HttpRequestMessage();
			SubjectUnderTest.Configuration = new HttpConfiguration();

			MockService = Mocker.GetMock<{{ SERVICE }}>();
		}

		#endregion

		#region Tests - Get Many/List

		[TestMethod]
		public void {{ CONTROLLER }}_Should_GetAll()
		{
			//		arrange
			var expected = Builder<{{ BASECLASS }}>.CreateListOfSize(10).Build();

			MockService.Setup(x => x.GetList()).Returns(expected);

			//		act
			var actual = SubjectUnderTest.GetAll();

			//		assert
			CollectionAssert.AreEqual(expected as ICollection, actual as ICollection);
	
			MockService.VerifyAll();
		}

		#endregion

		#region Tests - Get One

		[TestMethod]
		public void {{ CONTROLLER }}_Should_GetOne()
		{
			//		arrange
			var expected = Builder<{{ BASECLASS }}>.CreateNew().Build();

			MockService.Setup(x => x.Get({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns(expected);

			//		act
			var result = SubjectUnderTest.Get({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert

			{{ BASECLASS }} actual = null;

			Assert.IsTrue(response.Result.TryGetContentValue<{{ BASECLASS }}>(out actual));
			{% for column in table.columns %}
			Assert.AreEqual(expected.{{ column.property_name }}, actual.{{ column.property_name }});{% endfor %}
	
			MockService.VerifyAll();
		}

		[TestMethod]
		public void {{ CONTROLLER }}_Should_GetOne_NotFound()
		{
			//		arrange
			var expected = Builder<{{ BASECLASS }}>.CreateNew().Build();
	
			MockService.Setup(x => x.Get({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns(null as {{ BASECLASS }});

			//		act
			var result = SubjectUnderTest.Get({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
			Assert.IsTrue(response.Result.StatusCode == HttpStatusCode.NotFound);
	
			MockService.VerifyAll();
		}

		#endregion

		#region Tests - Post One

		[TestMethod]
		public void {{ CONTROLLER }}_Should_PostOne()
		{
			//		arrange
			var expected = Builder<{{ BASECLASS }}>.CreateNew().Build();
	
			MockService.Setup(x => x.Insert(expected));

			//		act
			var result = SubjectUnderTest.Post(expected);

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
			Assert.IsTrue(response.Result.StatusCode == HttpStatusCode.OK);
	
			MockService.VerifyAll();
		}

		[TestMethod]
		public void {{ CONTROLLER }}_Should_PostOne_BadRequest()
		{
			//		arrange
			var expected = Builder<{{ BASECLASS }}>.CreateNew().Build();

			MockService.Setup(x => x.Insert(expected)).Throws(new ValidationException(new []{ new ValidationFailure("", "") }));

			//		act
			var result = SubjectUnderTest.Post(expected);

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
			Assert.IsTrue(response.Result.StatusCode == HttpStatusCode.BadRequest);

			MockService.VerifyAll();
		}

		#endregion

		#region Tests - Put One

		[TestMethod]
		public void {{ CONTROLLER }}_Should_PutOne()
		{
			//		arrange
			var expected = Builder<{{ BASECLASS }}>.CreateNew().Build();
	
			MockService.Setup(x => x.Get({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns(expected);
	
			MockService.Setup(x => x.Update(expected));

			//		act
			var result = SubjectUnderTest.Put({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %}, expected);

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
			Assert.IsTrue(response.Result.StatusCode == HttpStatusCode.OK);
	
			MockService.VerifyAll();
		}

		[TestMethod]
		public void {{ CONTROLLER }}_Should_PutOne_BadRequest()
		{
			//		arrange
			var expected = Builder<{{ BASECLASS }}>.CreateNew().Build();
	
			MockService.Setup(x => x.Get({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns(expected);

			MockService.Setup(x => x.Update(expected)).Throws(new ValidationException(new[] { new ValidationFailure("", "") }));

			//		act
			var result = SubjectUnderTest.Put({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %}, expected);

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
			Assert.IsTrue(response.Result.StatusCode == HttpStatusCode.BadRequest);

			MockService.VerifyAll();
		}

		[TestMethod]
		public void {{ CONTROLLER }}_Should_PutOne_NotFound()
		{
			//		arrange
			var expected = Builder<{{ BASECLASS }}>.CreateNew().Build();
	
			MockService.Setup(x => x.Get({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns(null as {{ BASECLASS }});

			//		act
			var result = SubjectUnderTest.Put({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %}, expected);

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
			Assert.IsTrue(response.Result.StatusCode == HttpStatusCode.NotFound);

			MockService.VerifyAll();
		}

		#endregion

		#region Tests - Delete One

		[TestMethod]
		public void {{ CONTROLLER }}_Should_DeleteOne()
		{
			//		arrange
			var expected = Builder<{{ BASECLASS }}>.CreateNew().Build();

			MockService.Setup(x => x.Get({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns(expected);

			MockService.Setup(x => x.Delete(expected));

			//		act
			var result = SubjectUnderTest.Delete({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
			Assert.IsTrue(response.Result.StatusCode == HttpStatusCode.OK);

			MockService.VerifyAll();
		}

		[TestMethod]
		public void {{ CONTROLLER }}_Should_DeleteOne_NotFound()
		{
			//		arrange
			var expected = Builder<{{ BASECLASS }}>.CreateNew().Build();

			MockService.Setup(x => x.Get({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})).Returns(null as {{ BASECLASS }});

			//		act
			var result = SubjectUnderTest.Delete({% for column in table.primary_keys %}expected.{{ column.property_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});

			var response = result.ExecuteAsync(CancellationToken.None);

			response.Wait();

			//		assert
			Assert.IsTrue(response.Result.StatusCode == HttpStatusCode.NotFound);

			MockService.VerifyAll();
		}

		#endregion
	}
}