{% capture BASECLASS %}{{ table.class_name }}{% endcapture -%}
{% capture CONTROLLER %}{{ BASECLASS | plural }}Controller{% endcapture -%}
{% capture SERVICE %}{{ BASECLASS }}Service{% endcapture -%}
{% capture VALIDATOR %}IValidator<{{ BASECLASS }}>{% endcapture -%}
{% capture PROJECT %}{{ SOLUTION }}.Web{% endcapture -%}
{% capture CORE %}{{ SOLUTION }}.Core{% endcapture -%}
{% capture FILENAME %}{{ PROJECT }}\Controllers\{{ CONTROLLER }}.cs{% endcapture -%}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using FluentValidation;
using FluentValidation.Results;
using {{ CORE }}.Models;
using {{ CORE }}.Services;
using {{ CORE }}.Validators;

namespace {{ PROJECT }}.Controllers
{
	///	<summary>
	/// Represents a basic controller for {{ BASECLASS }}
	///	</summary>
	[RoutePrefix("{{ BASECLASS | plural }}"), Route("{action=Index}")]
	public class {{ CONTROLLER }} : Controller
	{
		#region Members
	
		private {{ SERVICE }} _service;
		private {{ VALIDATOR }} _validator;
		
		#endregion
		
		#region Contructors

		public {{ CONTROLLER }}({{ SERVICE }} service, {{ VALIDATOR }} validator)
		{
			_service = service;
			_validator = validator;
		}
		
		#endregion
		
		#region Index

		//
		// GET: /{{ BASECLASS }}/Index
		public ActionResult Index()
		{
			return View(_service.Get());
		}
		
		#endregion
		
		#region Create

		//
		// GET: /{{ BASECLASS }}/Create
		public ActionResult Create()
		{			
			return View(new {{ BASECLASS }}());
		}

		//
		// POST: /{{ BASECLASS }}/Create
		[HttpPost, ValidateAntiForgeryToken]
		public ActionResult Create({{ BASECLASS }} model)
		{
			ValidationResult vr = _validator.Validate(model);

			if (vr.IsValid)
			{
				_service.Save(model);

				return RedirectToAction("Index");
			}
			
			//	TODO	ModelState.AddValidationResults(vr);

			return View(model);
		}
		
		#endregion
		
		#region Edit

		//
		// GET: /{{ BASECLASS }}/Edit/5
		public ActionResult Edit({% for column in table.primary_keys %}{{ column.clr_type }} {{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})
		{
			{{ BASECLASS }} model = _service.Get({% for column in table.primary_keys %}{{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});
			
			if (model == null)
			{
				return RedirectToAction("Index");
			}

			return View(model);
		}

		//
		// POST: /{{ BASECLASS }}/Edit/5
		[HttpPost, ValidateAntiForgeryToken]
		public ActionResult Edit({{ BASECLASS }} model)
		{
			{{ BASECLASS }} {{ BASECLASS | camel }} = _service.Get({% for column in table.primary_keys %}model.{{ column.name | pascal | remove:BASECLASS }}{%if forloop.last == false %}, {% endif %}{% endfor %});
			{% for column in table.columns %}{% if column.is_primary_key == false %}
			{{ BASECLASS | camel }}.{{ column.name | pascal | remove:BASECLASS }} = model.{{ column.name | pascal | remove:BASECLASS }};{% endif %}{% endfor -%}


			ValidationResult vr = _validator.Validate({{ BASECLASS | camel }});

			if (vr.IsValid)
			{
				_service.Save({{ BASECLASS | camel }});

				return RedirectToAction("Index");
			}
			
			//	TODO	ModelState.AddValidationResults(vr);

			return View(model);
		}
		
		#endregion
		
		#region Delete

		//
		// GET: /{{ BASECLASS }}/Delete/5
		public ActionResult Delete({% for column in table.primary_keys %}{{ column.clr_type }} {{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %})
		{
			{{ BASECLASS }} model = _service.Get({% for column in table.primary_keys %}{{ column.parameter_name }}{%if forloop.last == false %}, {% endif %}{% endfor %});
			
			if (model == null)
			{
				return RedirectToAction("Index");
			}

			return View(model);
		}

		//
		// POST: /{{ BASECLASS }}/Delete/5
		[HttpPost, ValidateAntiForgeryToken]
		public ActionResult Delete({{ BASECLASS }} model)
		{
			_service.Delete(model);

			return RedirectToAction("Index");
		}
		
		#endregion
	}
}