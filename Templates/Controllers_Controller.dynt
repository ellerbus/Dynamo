{% capture BASECLASS %}{{ table.name | pascal }}{% endcapture -%}
{% capture CONTROLLER %}{{ BASECLASS }}Controller{% endcapture -%}
{% capture SERVICE %}{{ BASECLASS }}Service{% endcapture -%}
{% capture VALIDATOR %}IValidator<{{ BASECLASS }}>{% endcapture -%}
{% capture PROJECT %}{{ SOLUTION }}.Web{% endcapture -%}
{% capture CORE %}{{ SOLUTION }}.Core{% endcapture -%}
{% capture FILENAME %}{{ PROJECT }}\Controllers\{{ CONTROLLER }}.cs{% endcapture -%}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using {{ CORE }}.Models;
using {{ CORE }}.Services;
using {{ CORE }}.Validators;

namespace {{ PROJECT }}.Controllers
{
	///	<summary>
	/// Represents a basic controller for {{ BASECLASS }}
	///	</summary>
    public class {{ CONTROLLER }} : Controller
    {
		#region Members
	
		private {{ SERVICE }} _service;
        private {{ VALIDATOR }> _validator;
		
		#endregion
		
		#region Contructors

        public {{ CONTROLLER }}({{ SERVICE }} service, {{ VALIDATOR }} validator)
        {
			_service = service;
            _validator = validator;
        }
		
		#endregion
		
		#region Index

        //
        // GET: /{{ BASECLASS }}/Index
        public ActionResult Index()
        {
            return View(_service.GetList());
        }
		
		#endregion
		
		#region Create

        //
        // GET: /{{ BASECLASS }}/Create
        public ActionResult Create()
        {			
            return View(new {{ BASECLASS }}());
        }

        //
        // POST: /{{ BASECLASS }}/Create
        [HttpPost, ValidateAntiForgeryToken]
        public ActionResult Create({{ BASECLASS }} model)
        {
            ValidationResult vr = _validator.Validate(model);

            if (vr.IsValid)
            {
                _service.Save(model);

                return RedirectToAction("Index");
            }
			
			ModelState.AddValidationResults(vr);

            return View(model);
        }
		
		#endregion
		
		#region Edit

        //
        // GET: /{{ BASECLASS }}/Edit/5
        public ActionResult Edit({% for column in table.primary_keys %}{{ column.clr_type }} {{ column.name | camel }}{%if forloop.last == false %}, {% endif %}{% endfor %})
        {
			{{ BASECLASS }} model = _service.Get(({% for column in table.primary_keys %}{{ column.name | camel }}{%if forloop.last == false %}, {% endif %}{% endfor %}));
			
			if (model == null)
			{
				return RedirectToAction("Index");
			}

            return View(model);
        }

        //
        // POST: /{{ BASECLASS }}/Edit/5
        [HttpPost, ValidateAntiForgeryToken]
        public ActionResult Edit({{ BASECLASS }} model)
        {
            ValidationResult vr = _validator.Validate(model);

            if (vr.IsValid)
            {
                _service.Save(model);

                return RedirectToAction("Index");
            }
			
			ModelState.AddValidationResults(vr);

            return View(model);
        }
		
		#endregion
		
		#region Delete

        //
        // GET: /{{ BASECLASS }}/Delete/5
        public ActionResult Delete({% for column in table.primary_keys %}{{ column.clr_type }} {{ column.name | camel }}{%if forloop.last == false %}, {% endif %}{% endfor %})
        {
			{{ BASECLASS }} model = _service.Get(({% for column in table.primary_keys %}{{ column.name | camel }}{%if forloop.last == false %}, {% endif %}{% endfor %}));
			
			if (model == null)
			{
				return RedirectToAction("Index");
			}

            return View(model);
        }

        //
        // POST: /{{ BASECLASS }}/Delete/5
        [HttpPost, ValidateAntiForgeryToken]
        public ActionResult Delete({{ BASECLASS }} model)
        {
            _service.Delete(model);

            return RedirectToAction("Index");
        }
		
		#endregion
    }
}