{% capture BASECLASS %}{{ table.name | pascal }}{% endcapture -%}
{% capture REPO %}I{{ BASECLASS }}Repository{% endcapture -%}
{% capture PROJECT %}{{ SOLUTION }}.Core{% endcapture -%}
{% capture FILENAME %}{{ PROJECT }}\Repositories\{{ REPO }}.cs{% endcapture -%}
using System;
using System.Collections.Generic;
using Insight.Database;
using {{ PROJECT }}.Models;

namespace {{ PROJECT }}.Repositories
{
	///	<summary>
	/// Repository Interface for {{ BASELCASS }}
	///	</summary>
	public interface {{ REPO }}
	{
		///	<summary>
		///	Gets a single {{ BASECLASS }} by primary key calling the
		///	stored procedure {{ BASECLASS }}Select
		///	</summary>
		[Sql("{{ BASECLASS }}Select")]
		{{ BASECLASS }} Get({% for column in table.primary_keys %}{{ column.clr_type }} {{ column.name | camel }}{%if forloop.last == false %}, {% endif %}{% endfor %});

		///	<summary>
		///	Deletes a single {{ BASECLASS }} calling the
		///	stored procedure {{ BASECLASS }}Delete
		///	</summary>
		[Sql("{{ BASECLASS }}Delete")]
		void Delete({{ BASECLASS }} {{ BASECLASS | camel }});

		///	<summary>
		///	Deletes many {{ BASECLASS | plural }} calling the
		///	stored procedure {{ BASECLASS }}DeleteMany
		///	</summary>
		[Sql("{{ BASECLASS }}DeleteMany")]
		void Delete(IEnumerable<{{ BASECLASS }}> {{ BASECLASS | plural | camel }});

		///	<summary>
		///	Saves a single {{ BASECLASS }} calling the
		///	stored procedure {{ BASECLASS }}Upsert
		///	</summary>
		[Sql("{{ BASECLASS }}Upsert")]
		void Save({{ BASECLASS }} {{ BASECLASS | camel }});

		///	<summary>
		///	Saves many {{ BASECLASS | plural }} calling the
		///	stored procedure {{ BASECLASS }}UpsertMany
		///	</summary>
		[Sql("{{ BASECLASS }}UpsertMany")]
		void Save(IEnumerable<{{ BASECLASS }}> {{ BASECLASS | plural | camel }});
	}
}