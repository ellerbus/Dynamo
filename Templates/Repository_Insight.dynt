{% include 'NamingConventions' -%}
{% capture REPO %}I{{ BASECLASS }}Repository{% endcapture -%}
{% capture PROJECT %}{{ SOLUTION }}.Core{% endcapture -%}
{% capture FILENAME %}{{ PROJECT }}\Repositories\{{ IREPOSITORY }}.cs{% endcapture -%}
using System;
using System.Collections.Generic;
using Insight.Database;
using {{ PROJECT }}.Models;

namespace {{ PROJECT }}.Repositories
{
	///	<summary>
	/// Repository Interface for {{ BASELCASS }}
	///	</summary>
	public interface {{ IREPOSITORY }}
	{
		/////	<summary>
		/////	Dynamic SQL Sample
		/////	</summary>
		//[Sql("select * from {{ table.name }} where createdAt > @createdAfter")]
		//IList<{{ BASECLASS }}> GetList(DateTime createdAfter);

		///	<summary>
		///	Gets many {{ BASECLASSES }} by calling the
		///	stored procedure {{ BASECLASS }}SelectMany
		///	</summary>
		[Sql("{{ BASECLASS }}SelectMany")]
		IList<{{ BASECLASS }}> GetList();
	
		///	<summary>
		///	Gets a single {{ BASECLASS }} by primary key calling the
		///	stored procedure {{ BASECLASS }}SelectOne
		///	</summary>
		[Sql("{{ BASECLASS }}SelectOne")]
		{{ BASECLASS }} Get({% for column in table.primary_keys %}{{ column.clr_type }} {{ column.name }}{% if forloop.last == false %}, {% endif %}{% endfor %});

		///	<summary>
		///	Inserts a single {{ BASECLASS }} calling the
		///	stored procedure {{ BASECLASS }}InsertOne
		///	</summary>
		[Sql("{{ BASECLASS }}InsertOne")]
		void Insert({{ BASECLASS }} {{ CAMELCLASS }});

		///	<summary>
		///	Inserts many {{ BASECLASSES }} calling the
		///	stored procedure {{ BASECLASS }}InsertMany
		///	</summary>
		[Sql("{{ BASECLASS }}InsertMany")]
		void Insert(IEnumerable<{{ BASECLASS }}> {{ CAMELCLASSES }});

		///	<summary>
		///	Updates a single {{ BASECLASS }} calling the
		///	stored procedure {{ BASECLASS }}UpdateOne
		///	</summary>
		[Sql("{{ BASECLASS }}UpdateOne")]
		void Update({{ BASECLASS }} {{ CAMELCLASS }});

		///	<summary>
		///	Updates many {{ BASECLASSES }} calling the
		///	stored procedure {{ BASECLASS }}UpdateMany
		///	</summary>
		[Sql("{{ BASECLASS }}UpdateMany")]
		void Update(IEnumerable<{{ BASECLASS }}> {{ CAMELCLASSES }});

		///	<summary>
		///	Deletes a single {{ BASECLASS }} calling the
		///	stored procedure {{ BASECLASS }}DeleteOne
		///	</summary>
		[Sql("{{ BASECLASS }}DeleteOne")]
		void Delete({{ BASECLASS }} {{ CAMELCLASS }});

		///	<summary>
		///	Deletes many {{ BASECLASSES }} calling the
		///	stored procedure {{ BASECLASS }}DeleteMany
		///	</summary>
		[Sql("{{ BASECLASS }}DeleteMany")]
		void Delete(IEnumerable<{{ BASECLASS }}> {{ CAMELCLASSES }});

		///	<summary>
		///	Saves a single {{ BASECLASS }} calling the
		///	stored procedure {{ BASECLASS }}UpsertOne
		///	</summary>
		[Sql("{{ BASECLASS }}UpsertOne")]
		void Save({{ BASECLASS }} {{ CAMELCLASS }});

		///	<summary>
		///	Saves many {{ BASECLASSES }} calling the
		///	stored procedure {{ BASECLASS }}UpsertMany
		///	</summary>
		[Sql("{{ BASECLASS }}UpsertMany")]
		void Save(IEnumerable<{{ BASECLASS }}> {{ CAMELCLASSES }});
	}
}